Greetings, everyone. This is Group 8, and this is our project for Aling Narsingh's mobile app. So in the last module, we created a Java-based inventory system, and this app holds databases, and it can also save the data using object serialization. So the thing that we added in here to support or to connect it to the mobile app, we created a server. which runs in the background and it has different endpoints. For example, for getting the inventory or logging in or registering. Also the logs will be shown in here that will show the request and the responses that is formatted in JSON. So let's go to the first unit test case, which is to verify that the setup screen works and can connect to the server. So upon going to the server panel, we will see the host URL where the server is being hosted. In this case, it will be defaulting to the local IP address of this machine. So let's type in the URL with the port. So upon clicking the connect button, it will show a message that says that it is connected to the server. And here on the logs, we can see that we got a ping request, which is basically just to check whether if a server exists in that address. So the expected behavior, the actual behavior is the same with the expected behavior, which is that the app connects to the server and user is taken to the logins. So let's move on to the next unit test case, which is to verify that valid user can log in. So before we can do this, we actually have to register a new account. So for this example, let's do my name and set a unique username. the home address, the contract number and the password. If the password and the confirmed password is not the same, it will display an error that says that password does not match. It has to match. So in this case, our password will be 12345. And let's press Register. And now let's check if we can log in to the registered account. Now it comes to 12345. Click on the sign in button and it says that we are successfully logged in and we are taken to the product listing screen. So here we can say that the actual behavior again is the same with the expected behavior, which is the user is taken to the product listing inventory screen with a welcome message. So now let's check whether the login fails with the wrong email or password. So let's restart the app. And put in the address. And let's type in a random username and password. So when we click on sign in, it will display a message which says incorrect username and or password. Please try again. And this will be, the server handles this and sends a result which tells if the username or the password matches. So a value of zero means that the username and password is correct, and a value of two means that the credentials don't match, and the result number of one says that the username does not exist on the database. So we can now verify that the login fails with wrong email and password. And now going to the next unit test case, which is to verify that the product listing shows. So this is the product listing show, the product listing. And whenever we get the, or we load the product listing screen, it will send a request to the server with the inventory endpoint, and it will return a JSON a JSON array of those products, along with their descriptions and their quantity. So this is a list view, and each of the icon here is a layout, and they show the brand name, the title, the quantity, and the price. So now we can confirm that the product listing shows. So now let's move on to the next unit test case, which will be presented by Jaden Lards. Hello, and for the next test case, we will verify that the search bar returns a correct result. In this case, we click the search bar, which is located above the test here. We will put in an example of, let's say, pancit canton, and it will show the item along with the price and the quantity, which is in stock. Its actual behavior falls within the expected behavior, which is that it displays product with title and description that matches the keywords that is typed in the search bar. Next is that next test case is to verify product list refreshes correctly. And as you can see, when we close out of the app, After we log in, it shows the product listing screen and it refreshes correctly. And again, the actual behavior falls within the expected behavior, which is to update and display the latest product information. And next is to verify that the product description is displayed correctly. Here, we can see the product listing and all the items. Once you click on that, it will show you the title, the name of the product, the number of items that is in stock, and the product details, which is clearly seen correctly here. And then again, the expected behavior falls within the, the actual behavior falls within the expected behavior. Next, we will pass this to Li Xing, which will explain the next test cases. The next user test case is to verify that the user can specify quantity of product. You would click the product and adjust the quantity through the underline under the quantity. And then the actual behavior is also the expected behavior since it displays the user's inputted quantity correctly. The next one is to verify that the product stock is displayed correctly, wherein per product screen under its name, the number of stock per item is displayed. This can also be seen in the product list. The actual behavior is also the expected behavior wherein the correct number of stops is displayed over the product. The next would be to verify that a user can add the product to their cart. Once selecting the quantity of the product, the user can add it to the cart. This also takes into consideration the number of stops so that you can only check out product quantities less than or equal to the number of stops available. The actual behavior is also the expected behavior because it displays the user-selected product on the cart tab correctly. The next one is to verify selection of payment method, wherein the selection of payment method is available once items are placed into the cart. Checking out would show the selection of the different types of payment methods under the selection of payment methods. Therefore, the highlight the selected payment method and update the order summary is also the actual behavior. The next user test cases will be presented by Manikat. Next user test case will be the selection of delivery option. Now, if we click on to under fulfillment mode, we will see that it's standard delivery option, but we can choose between express or pickup. As shown, the actual is the same as the expect user case. Now, to verify the checkout process, we need to confirm the order so that it will show it has now displayed a confirmation message that your order has been reached successfully, thus having the actual use testings the outcome of the expected test piece. Now, the next step is to verify if the order summary is accurate by seeing the receipt. Here we can see all sorts of information and what order you have placed and also your delivery mode and payment mode. The actual test piece is as expected, the same as the expected test piece. It says we choose our user test case with application demo. Thank you for watching. Have a nice day.